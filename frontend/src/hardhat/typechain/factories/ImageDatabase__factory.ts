/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ImageDatabase } from "../ImageDatabase";

export class ImageDatabase__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ImageDatabase> {
    return super.deploy(overrides || {}) as Promise<ImageDatabase>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ImageDatabase {
    return super.attach(address) as ImageDatabase;
  }
  connect(signer: Signer): ImageDatabase__factory {
    return super.connect(signer) as ImageDatabase__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ImageDatabase {
    return new Contract(address, _abi, signerOrProvider) as ImageDatabase;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address payable",
        name: "author",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "hash",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tipAmount",
        type: "uint256",
      },
    ],
    name: "ImageCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "images",
    outputs: [
      {
        internalType: "address payable",
        name: "author",
        type: "address",
      },
      {
        internalType: "string",
        name: "hash",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "tipAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tipGoal",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numImage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_imgHash",
        type: "string",
      },
      {
        internalType: "string",
        name: "_imgDescription",
        type: "string",
      },
    ],
    name: "uploadImage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600d60808190526c496d616765446174616261736560981b60a090815261002e9160009190610046565b50600060015534801561004057600080fd5b5061011a565b828054610052906100df565b90600052602060002090601f01602090048101928261007457600085556100ba565b82601f1061008d57805160ff19168380011785556100ba565b828001600101855582156100ba579182015b828111156100ba57825182559160200191906001019061009f565b506100c69291506100ca565b5090565b5b808211156100c657600081556001016100cb565b6002810460018216806100f357607f821691505b6020821081141561011457634e487b7160e01b600052602260045260246000fd5b50919050565b6106bb806101296000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde0314610051578063848564821461006f578063a91b831414610093578063c65f7205146100a8575b600080fd5b6100596100bd565b60405161006691906105ea565b60405180910390f35b61008261007d36600461053c565b61014b565b60405161006695949392919061059f565b6100a66100a13660046104db565b610294565b005b6100b06103b5565b6040516100669190610604565b600080546100ca9061060d565b80601f01602080910402602001604051908101604052809291908181526020018280546100f69061060d565b80156101435780601f1061011857610100808354040283529160200191610143565b820191906000526020600020905b81548152906001019060200180831161012657829003601f168201915b505050505081565b600260205260009081526040902080546001820180546001600160a01b0390921692916101779061060d565b80601f01602080910402602001604051908101604052809291908181526020018280546101a39061060d565b80156101f05780601f106101c5576101008083540402835291602001916101f0565b820191906000526020600020905b8154815290600101906020018083116101d357829003601f168201915b5050505050908060020180546102059061060d565b80601f01602080910402602001604051908101604052809291908181526020018280546102319061060d565b801561027e5780601f106102535761010080835404028352916020019161027e565b820191906000526020600020905b81548152906001019060200180831161026157829003601f168201915b5050505050908060030154908060040154905085565b60008251116102a257600080fd5b60008151116102b057600080fd5b336102ba57600080fd5b600180549060006102ca83610648565b90915550506040805160a08101825233815260208082018581528284018590526000606084018190526080840181905260018054825260028452949020835181546001600160a01b0319166001600160a01b03909116178155905180519394919361033d939285019291909101906103bb565b50604082015180516103599160028401916020909101906103bb565b5060608201518160030155608082015181600401559050507fa618a6562da55f1b9488499b3311d789eb26c55486d19378b4bc6aba964825e33383836000806040516103a995949392919061059f565b60405180910390a15050565b60015481565b8280546103c79061060d565b90600052602060002090601f0160209004810192826103e9576000855561042f565b82601f1061040257805160ff191683800117855561042f565b8280016001018555821561042f579182015b8281111561042f578251825591602001919060010190610414565b5061043b92915061043f565b5090565b5b8082111561043b5760008155600101610440565b600082601f830112610464578081fd5b813567ffffffffffffffff8082111561047f5761047f61066f565b604051601f8301601f19908116603f011681019082821181831017156104a7576104a761066f565b816040528381528660208588010111156104bf578485fd5b8360208701602083013792830160200193909352509392505050565b600080604083850312156104ed578182fd5b823567ffffffffffffffff80821115610504578384fd5b61051086838701610454565b93506020850135915080821115610525578283fd5b5061053285828601610454565b9150509250929050565b60006020828403121561054d578081fd5b5035919050565b60008151808452815b818110156105795760208185018101518683018201520161055d565b8181111561058a5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038616815260a0602082018190526000906105c390830187610554565b82810360408401526105d58187610554565b60608401959095525050608001529392505050565b6000602082526105fd6020830184610554565b9392505050565b90815260200190565b60028104600182168061062157607f821691505b6020821081141561064257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561066857634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e764414247c072a7695e6e7cf5c50ef071e7526dcf0e43a0c28c53d5eb69142764736f6c63430008010033";
