"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactContext = void 0;
const debug_1 = require("debug");
const ts_morph_1 = require("ts-morph");
const ReactComponent_1 = require("./ReactComponent");
const TsMorhProject_1 = require("./TsMorhProject");
const log = debug_1.debug("hardhat:plugin:react");
class ReactContext {
    constructor(sourceFile, args, bre, contractContext) {
        this.componentName = "Symfoni";
        this.hre = bre;
        this.args = args;
        this.sourceFile = sourceFile;
        this.contractContexts = contractContext;
    }
    async generate() {
        this.headers();
        this.imports();
        this.preComponentStatements();
        this.preComponentInterfaces();
        const reactComponent = this.createReactComponent();
        this.reactComponent = new ReactComponent_1.ReactComponent(this.sourceFile, this.args, this.hre, this.contractContexts, reactComponent);
        this.reactComponent.generate();
        this.sourceFile.formatText();
    }
    headers() {
        this.sourceFile.addStatements((writer) => {
            writer.write(`/* Autogenerated file. Do not edit manually. */
        /* tslint:disable */
        /* eslint-disable */`);
        });
    }
    imports() {
        this.sourceFile.addImportDeclarations([
            {
                namedImports: ["providers", "Signer", "ethers"],
                moduleSpecifier: "ethers",
            },
            {
                namedImports: ["useEffect", "useState"],
                defaultImport: "React",
                moduleSpecifier: "react",
            },
            {
                namedImports: ["IProviderOptions"],
                defaultImport: "Web3Modal",
                moduleSpecifier: "web3modal",
            },
        ]);
        // Adding .replace(`\\`, `/`) for windows corrections
        this.contractContexts.forEach((contract) => {
            if (contract.deploymentFile) {
                this.sourceFile.addImportDeclaration({
                    defaultImport: `${contract.name}Deployment`,
                    moduleSpecifier: "./" + contract.deploymentFile.replace(`\\`, `/`),
                });
            }
            if (!contract.instance) {
                this.sourceFile.addImportDeclarations([
                    {
                        namedImports: [`${contract.typechainInstanceName}`],
                        moduleSpecifier: "./" +
                            contract.typechainInstance
                                .replace(".d.ts", "")
                                .replace(`\\`, `/`),
                    },
                    {
                        namedImports: [`${contract.typechainFactoryName}`],
                        moduleSpecifier: "./" +
                            contract.typechainFactory.replace(".ts", "").replace(`\\`, `/`),
                    },
                ]);
            }
        });
        // Handle web3modal providers
        if (this.hre.config.react.providerOptions) {
            for (const [providerName, providerOptions] of Object.entries(this.hre.config.react.providerOptions)) {
                if (providerName === "walletconnect") {
                    log("WalletConnect configuration found. Ensure @walletconnect/web3-provider is installed in Frontend.");
                    this.sourceFile.addImportDeclaration({
                        defaultImport: `${"WalletConnectProvider"}`,
                        moduleSpecifier: `${"@walletconnect/web3-provider"}`,
                    });
                }
            }
        }
    }
    addConstStatment(declaration, exported = false) {
        this.sourceFile.addVariableStatement({
            declarationKind: ts_morph_1.VariableDeclarationKind.Const,
            isExported: exported,
            declarations: [declaration],
        });
    }
    preComponentStatements() {
        this.addConstStatment({
            name: "emptyContract",
            initializer: `{
          instance: undefined,
          factory: undefined
        }`,
        });
        this.addConstStatment({
            name: "defaultProvider",
            type: "providers.Provider | undefined",
            initializer: "undefined",
        });
        this.addConstStatment({
            name: "ProviderContext",
            initializer: "React.createContext<[providers.Provider | undefined, React.Dispatch<React.SetStateAction<providers.Provider | undefined>>]>([defaultProvider, () => { }])",
        }, true);
        this.addConstStatment({
            name: "defaultCurrentAddress",
            type: "string",
            initializer: `""`,
        });
        this.addConstStatment({
            name: "CurrentAddressContext",
            initializer: "React.createContext<[string, React.Dispatch<React.SetStateAction<string>>]>([defaultCurrentAddress, () => { }])",
        }, true);
        this.addConstStatment({
            name: "defaultSigner",
            type: "Signer | undefined",
            initializer: "undefined",
        });
        this.addConstStatment({
            name: "SignerContext",
            initializer: "React.createContext<[Signer | undefined, React.Dispatch<React.SetStateAction<Signer | undefined>>]>([defaultSigner, () => { }])",
        }, true);
        this.addConstStatment({
            name: `default${this.componentName}Context`,
            type: `${this.componentName}ContextInterface`,
            initializer: `{
        currentHardhatProvider: "",
        init: () => { throw Error("Symfoni context not initialized") },
        loading: false,
        messages: [],
        providers: []
      }`,
        });
        this.addConstStatment({
            name: `${this.componentName}Context`,
            initializer: `React.createContext<${this.componentName}ContextInterface>(default${this.componentName}Context)`,
        }, true);
        this.contractContexts.forEach((contract) => {
            this.addConstStatment({
                name: `${contract.name}Context`,
                initializer: `React.createContext<${TsMorhProject_1.contractInterfaceName(contract)}>(emptyContract)`,
            }, true);
        });
    }
    preComponentInterfaces() {
        this.sourceFile.addInterface({
            name: this.componentName + "ContextInterface",
            isExported: true,
            properties: [
                {
                    name: "init",
                    type: `(provider?: string) => void`,
                },
                {
                    name: "loading",
                    type: `boolean`,
                },
                {
                    name: "messages",
                    type: `string[]`,
                },
                {
                    name: "currentHardhatProvider",
                    type: `string`,
                },
                {
                    name: "providers",
                    type: `string[]`,
                },
            ],
        });
        this.sourceFile.addInterface({
            name: this.componentName + "Props",
            isExported: true,
            properties: [
                {
                    name: "autoInit",
                    type: `boolean`,
                    hasQuestionToken: true,
                },
                {
                    name: "showLoading",
                    type: `boolean`,
                    hasQuestionToken: true,
                },
                {
                    name: "loadingComponent",
                    type: `React.ReactNode`,
                    hasQuestionToken: true,
                },
            ],
        });
        this.contractContexts.forEach((contract) => {
            this.sourceFile.addInterface({
                name: TsMorhProject_1.contractInterfaceName(contract),
                isExported: true,
                properties: [
                    {
                        name: "instance",
                        type: `${contract.typechainInstanceName}`,
                        hasQuestionToken: contract.deploymentFile ? true : true,
                    },
                    {
                        name: "factory",
                        type: `${contract.typechainFactoryName}`,
                        hasQuestionToken: true,
                    },
                ],
            });
        });
    }
    createReactComponent() {
        this.sourceFile.addVariableStatement({
            declarationKind: ts_morph_1.VariableDeclarationKind.Const,
            isExported: true,
            declarations: [
                {
                    name: this.componentName,
                    type: `React.FC<${this.componentName + "Props"}>`,
                    initializer: `({
            showLoading = true,
            autoInit = true,
            ...props
          }) => {}`,
                },
            ],
        });
        const symfoniContextContextComponent = this.sourceFile.getVariableDeclarationOrThrow(this.componentName);
        const reactComponent = symfoniContextContextComponent.getInitializerIfKindOrThrow(ts_morph_1.SyntaxKind.ArrowFunction);
        return reactComponent;
    }
}
exports.ReactContext = ReactContext;
//# sourceMappingURL=ReactContext.js.map